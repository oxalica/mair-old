Ok([(InnerDoc(" hugh?\n"), 0..10), (Keyword(Use), 11..14), (Ident("std"), 15..18), (Symbol(ColonColon), 18..20), (Symbol(Mul), 20..21), (Symbol(Semi), 21..22), (OuterDoc(" just junk\n"), 24..38), (Symbol(Hash), 38..39), (Delimiter { is_open: true, delim: Bracket }, 39..40), (Ident("test"), 40..44), (Delimiter { is_open: false, delim: Bracket }, 44..45), (Keyword(Fn), 46..48), (Ident("lexer_keyword_ident"), 49..68), (Delimiter { is_open: true, delim: Paren }, 68..69), (Delimiter { is_open: false, delim: Paren }, 69..70), (Delimiter { is_open: true, delim: Brace }, 71..72), (Ident("assert_eq"), 77..86), (Symbol(Bang), 86..87), (Delimiter { is_open: true, delim: Paren }, 87..88), (Ident("lex"), 88..91), (Delimiter { is_open: true, delim: Paren }, 91..92), (Literal(StrLike { is_bytestr: false, s: "_" }), 92..95), (Delimiter { is_open: false, delim: Paren }, 95..96), (Symbol(Comma), 96..97), (Ident("Ok"), 105..107), (Delimiter { is_open: true, delim: Paren }, 107..108), (Ident("vec"), 108..111), (Symbol(Bang), 111..112), (Delimiter { is_open: true, delim: Bracket }, 112..113), (Delimiter { is_open: true, delim: Paren }, 113..114), (Ident("Ident"), 114..119), (Delimiter { is_open: true, delim: Paren }, 119..120), (Literal(StrLike { is_bytestr: false, s: "_" }), 120..123), (Delimiter { is_open: false, delim: Paren }, 123..124), (Symbol(Comma), 124..125), (Literal(IntLike { ty: None, val: 0 }), 126..127), (Symbol(DotDot), 127..129), (Literal(IntLike { ty: None, val: 1 }), 129..130), (Delimiter { is_open: false, delim: Paren }, 130..131), (Delimiter { is_open: false, delim: Bracket }, 131..132), (Delimiter { is_open: false, delim: Paren }, 132..133), (Delimiter { is_open: false, delim: Paren }, 133..134), (Symbol(Semi), 134..135), (Ident("assert_eq"), 140..149), (Symbol(Bang), 149..150), (Delimiter { is_open: true, delim: Paren }, 150..151), (Ident("lex"), 151..154), (Delimiter { is_open: true, delim: Paren }, 154..155), (Literal(StrLike { is_bytestr: false, s: "a" }), 155..158), (Delimiter { is_open: false, delim: Paren }, 158..159), (Symbol(Comma), 159..160), (Ident("Ok"), 168..170), (Delimiter { is_open: true, delim: Paren }, 170..171), (Ident("vec"), 171..174), (Symbol(Bang), 174..175), (Delimiter { is_open: true, delim: Bracket }, 175..176), (Delimiter { is_open: true, delim: Paren }, 176..177), (Ident("Ident"), 177..182), (Delimiter { is_open: true, delim: Paren }, 182..183), (Literal(StrLike { is_bytestr: false, s: "a" }), 183..186), (Delimiter { is_open: false, delim: Paren }, 186..187), (Symbol(Comma), 187..188), (Literal(IntLike { ty: None, val: 0 }), 189..190), (Symbol(DotDot), 190..192), (Literal(IntLike { ty: None, val: 1 }), 192..193), (Delimiter { is_open: false, delim: Paren }, 193..194), (Delimiter { is_open: false, delim: Bracket }, 194..195), (Delimiter { is_open: false, delim: Paren }, 195..196), (Delimiter { is_open: false, delim: Paren }, 196..197), (Symbol(Semi), 197..198), (Ident("assert_eq"), 203..212), (Symbol(Bang), 212..213), (Delimiter { is_open: true, delim: Paren }, 213..214), (Ident("lex"), 214..217), (Delimiter { is_open: true, delim: Paren }, 217..218), (Literal(StrLike { is_bytestr: false, s: "as" }), 218..222), (Delimiter { is_open: false, delim: Paren }, 222..223), (Symbol(Comma), 223..224), (Ident("Ok"), 231..233), (Delimiter { is_open: true, delim: Paren }, 233..234), (Ident("vec"), 234..237), (Symbol(Bang), 237..238), (Delimiter { is_open: true, delim: Bracket }, 238..239), (Delimiter { is_open: true, delim: Paren }, 239..240), (Ident("Keyword"), 240..247), (Delimiter { is_open: true, delim: Paren }, 247..248), (Ident("Kw"), 248..250), (Symbol(ColonColon), 250..252), (Ident("As"), 252..254), (Delimiter { is_open: false, delim: Paren }, 254..255), (Symbol(Comma), 255..256), (Literal(IntLike { ty: None, val: 0 }), 257..258), (Symbol(DotDot), 258..260), (Literal(IntLike { ty: None, val: 2 }), 260..261), (Delimiter { is_open: false, delim: Paren }, 261..262), (Delimiter { is_open: false, delim: Bracket }, 262..263), (Delimiter { is_open: false, delim: Paren }, 263..264), (Delimiter { is_open: false, delim: Paren }, 264..265), (Symbol(Semi), 265..266), (Ident("assert_eq"), 271..280), (Symbol(Bang), 280..281), (Delimiter { is_open: true, delim: Paren }, 281..282), (Ident("lex"), 282..285), (Delimiter { is_open: true, delim: Paren }, 285..286), (Literal(StrLike { is_bytestr: false, s: "asc" }), 286..291), (Delimiter { is_open: false, delim: Paren }, 291..292), (Symbol(Comma), 292..293), (Ident("Ok"), 299..301), (Delimiter { is_open: true, delim: Paren }, 301..302), (Ident("vec"), 302..305), (Symbol(Bang), 305..306), (Delimiter { is_open: true, delim: Bracket }, 306..307), (Delimiter { is_open: true, delim: Paren }, 307..308), (Ident("Ident"), 308..313), (Delimiter { is_open: true, delim: Paren }, 313..314), (Literal(StrLike { is_bytestr: false, s: "asc" }), 314..319), (Delimiter { is_open: false, delim: Paren }, 319..320), (Symbol(Comma), 320..321), (Literal(IntLike { ty: None, val: 0 }), 322..323), (Symbol(DotDot), 323..325), (Literal(IntLike { ty: None, val: 3 }), 325..326), (Delimiter { is_open: false, delim: Paren }, 326..327), (Delimiter { is_open: false, delim: Bracket }, 327..328), (Delimiter { is_open: false, delim: Paren }, 328..329), (Delimiter { is_open: false, delim: Paren }, 329..330), (Symbol(Semi), 330..331), (Ident("assert_eq"), 336..345), (Symbol(Bang), 345..346), (Delimiter { is_open: true, delim: Paren }, 346..347), (Ident("lex"), 347..350), (Delimiter { is_open: true, delim: Paren }, 350..351), (Literal(StrLike { is_bytestr: false, s: "a0__c_" }), 351..359), (Delimiter { is_open: false, delim: Paren }, 359..360), (Symbol(Comma), 360..361), (Ident("Ok"), 364..366), (Delimiter { is_open: true, delim: Paren }, 366..367), (Ident("vec"), 367..370), (Symbol(Bang), 370..371), (Delimiter { is_open: true, delim: Bracket }, 371..372), (Delimiter { is_open: true, delim: Paren }, 372..373), (Ident("Ident"), 373..378), (Delimiter { is_open: true, delim: Paren }, 378..379), (Literal(StrLike { is_bytestr: false, s: "a0__c_" }), 379..387), (Delimiter { is_open: false, delim: Paren }, 387..388), (Symbol(Comma), 388..389), (Literal(IntLike { ty: None, val: 0 }), 390..391), (Symbol(DotDot), 391..393), (Literal(IntLike { ty: None, val: 6 }), 393..394), (Delimiter { is_open: false, delim: Paren }, 394..395), (Delimiter { is_open: false, delim: Bracket }, 395..396), (Delimiter { is_open: false, delim: Paren }, 396..397), (Delimiter { is_open: false, delim: Paren }, 397..398), (Symbol(Semi), 398..399), (Ident("assert_eq"), 404..413), (Symbol(Bang), 413..414), (Delimiter { is_open: true, delim: Paren }, 414..415), (Ident("lex"), 415..418), (Delimiter { is_open: true, delim: Paren }, 418..419), (Literal(StrLike { is_bytestr: false, s: "_9 a0" }), 419..426), (Delimiter { is_open: false, delim: Paren }, 426..427), (Symbol(Comma), 427..428), (Ident("Ok"), 432..434), (Delimiter { is_open: true, delim: Paren }, 434..435), (Ident("vec"), 435..438), (Symbol(Bang), 438..439), (Delimiter { is_open: true, delim: Bracket }, 439..440), (Delimiter { is_open: true, delim: Paren }, 440..441), (Ident("Ident"), 441..446), (Delimiter { is_open: true, delim: Paren }, 446..447), (Literal(StrLike { is_bytestr: false, s: "_9" }), 447..451), (Delimiter { is_open: false, delim: Paren }, 451..452), (Symbol(Comma), 452..453), (Literal(IntLike { ty: None, val: 0 }), 454..455), (Symbol(DotDot), 455..457), (Literal(IntLike { ty: None, val: 2 }), 457..458), (Delimiter { is_open: false, delim: Paren }, 458..459), (Symbol(Comma), 459..460), (Delimiter { is_open: true, delim: Paren }, 461..462), (Ident("Ident"), 462..467), (Delimiter { is_open: true, delim: Paren }, 467..468), (Literal(StrLike { is_bytestr: false, s: "a0" }), 468..472), (Delimiter { is_open: false, delim: Paren }, 472..473), (Symbol(Comma), 473..474), (Literal(IntLike { ty: None, val: 3 }), 475..476), (Symbol(DotDot), 476..478), (Literal(IntLike { ty: None, val: 5 }), 478..479), (Delimiter { is_open: false, delim: Paren }, 479..480), (Delimiter { is_open: false, delim: Bracket }, 480..481), (Delimiter { is_open: false, delim: Paren }, 481..482), (Delimiter { is_open: false, delim: Paren }, 482..483), (Symbol(Semi), 483..484), (Ident("assert_eq"), 489..498), (Symbol(Bang), 498..499), (Delimiter { is_open: true, delim: Paren }, 499..500), (Ident("lex"), 500..503), (Delimiter { is_open: true, delim: Paren }, 503..504), (Literal(StrLike { is_bytestr: false, s: "macro_rules" }), 504..517), (Delimiter { is_open: false, delim: Paren }, 517..518), (Symbol(Comma), 518..519), (Ident("Ok"), 520..522), (Delimiter { is_open: true, delim: Paren }, 522..523), (Ident("vec"), 523..526), (Symbol(Bang), 526..527), (Delimiter { is_open: true, delim: Bracket }, 527..528), (Delimiter { is_open: true, delim: Paren }, 528..529), (Ident("Ident"), 529..534), (Delimiter { is_open: true, delim: Paren }, 534..535), (Literal(StrLike { is_bytestr: false, s: "macro_rules" }), 535..548), (Delimiter { is_open: false, delim: Paren }, 548..549), (Symbol(Comma), 549..550), (Literal(IntLike { ty: None, val: 0 }), 551..552), (Symbol(DotDot), 552..554), (Literal(IntLike { ty: None, val: 11 }), 554..556), (Delimiter { is_open: false, delim: Paren }, 556..557), (Delimiter { is_open: false, delim: Bracket }, 557..558), (Delimiter { is_open: false, delim: Paren }, 558..559), (Delimiter { is_open: false, delim: Paren }, 559..560), (Symbol(Semi), 560..561), (Delimiter { is_open: false, delim: Brace }, 562..563), (Keyword(Impl), 566..570), (Symbol(Lt), 570..571), (Lifetime("input"), 571..577), (Symbol(Gt), 577..578), (Ident("Iterator"), 579..587), (Keyword(For), 588..591), (Ident("Lexer"), 592..597), (Symbol(Lt), 597..598), (Lifetime("input"), 598..604), (Symbol(Gt), 604..605), (Delimiter { is_open: true, delim: Brace }, 606..607), (InnerDoc("no real impl here"), 612..634), (Delimiter { is_open: false, delim: Brace }, 635..636), (Ident("symbol_test"), 638..649), (Symbol(Bang), 649..650), (Delimiter { is_open: true, delim: Brace }, 650..651), (Symbol(Shr), 652..654), (Symbol(Ge), 654..656), (Symbol(ShrEq), 656..659), (Symbol(EqEq), 659..661), (Symbol(RFatArrow), 661..663), (Symbol(Eq), 663..664), (Delimiter { is_open: false, delim: Brace }, 665..666)])
