Ok([(InnerDoc(" hugh?\n"), "//! hugh?\n"), (Keyword(Use), "use"), (Ident("std"), "std"), (Symbol(ColonColon), "::"), (Symbol(Mul), "*"), (Symbol(Semi), ";"), (OuterDoc(" just junk\n"), "/// just junk\n"), (Symbol(Hash), "#"), (Delimiter { is_open: true, delim: Bracket }, "["), (Ident("test"), "test"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Keyword(Fn), "fn"), (Ident("lexer_keyword_ident"), "lexer_keyword_ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: true, delim: Brace }, "{"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "_" }), "\"_\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "_" }), "\"_\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 1 }), "1"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "a" }), "\"a\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "a" }), "\"a\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 1 }), "1"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "as" }), "\"as\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Keyword"), "Keyword"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Kw"), "Kw"), (Symbol(ColonColon), "::"), (Ident("As"), "As"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 2 }), "2"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "asc" }), "\"asc\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "asc" }), "\"asc\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 3 }), "3"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "a0__c_" }), "\"a0__c_\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "a0__c_" }), "\"a0__c_\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 6 }), "6"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "_9 a0" }), "\"_9 a0\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "_9" }), "\"_9\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 2 }), "2"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "a0" }), "\"a0\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 3 }), "3"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 5 }), "5"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Ident("assert_eq"), "assert_eq"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("lex"), "lex"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "macro_rules" }), "\"macro_rules\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Ident("Ok"), "Ok"), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("vec"), "vec"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Bracket }, "["), (Delimiter { is_open: true, delim: Paren }, "("), (Ident("Ident"), "Ident"), (Delimiter { is_open: true, delim: Paren }, "("), (Literal(StrLike { is_bytestr: false, s: "macro_rules" }), "\"macro_rules\""), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Comma), ","), (Literal(IntLike { ty: None, val: 0 }), "0"), (Symbol(DotDot), ".."), (Literal(IntLike { ty: None, val: 11 }), "11"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Bracket }, "]"), (Delimiter { is_open: false, delim: Paren }, ")"), (Delimiter { is_open: false, delim: Paren }, ")"), (Symbol(Semi), ";"), (Delimiter { is_open: false, delim: Brace }, "}"), (Keyword(Impl), "impl"), (Symbol(Lt), "<"), (Lifetime("input"), "\'input"), (Symbol(Gt), ">"), (Ident("Iterator"), "Iterator"), (Keyword(For), "for"), (Ident("Lexer"), "Lexer"), (Symbol(Lt), "<"), (Lifetime("input"), "\'input"), (Symbol(Gt), ">"), (Delimiter { is_open: true, delim: Brace }, "{"), (InnerDoc("no real impl here"), "/*!no real impl here*/"), (Delimiter { is_open: false, delim: Brace }, "}"), (Ident("symbol_test"), "symbol_test"), (Symbol(Bang), "!"), (Delimiter { is_open: true, delim: Brace }, "{"), (Symbol(Shr), ">>"), (Symbol(Ge), ">="), (Symbol(ShrEq), ">>="), (Symbol(EqEq), "=="), (Symbol(RFatArrow), "=>"), (Symbol(Eq), "="), (Delimiter { is_open: false, delim: Brace }, "}")])
