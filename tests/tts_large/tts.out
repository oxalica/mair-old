Ok([(Token(Keyword(Extern)), 0..6), (Token(Keyword(Crate)), 7..12), (Token(Ident("mair")), 13..17), (Token(Symbol(Semi)), 17..18), (Token(Keyword(Use)), 19..22), (Token(Ident("std")), 23..26), (Token(Symbol(ColonColon)), 26..28), (Token(Ident("fs")), 28..30), (Token(Symbol(ColonColon)), 30..32), (Token(Symbol(Mul)), 32..33), (Token(Symbol(Semi)), 33..34), (Token(Keyword(Use)), 35..38), (Token(Ident("std")), 39..42), (Token(Symbol(ColonColon)), 42..44), (Token(Ident("path")), 44..48), (Token(Symbol(ColonColon)), 48..50), (Tree { delim: Brace, tts: [(Token(Ident("Path")), 51..55), (Token(Symbol(Comma)), 55..56), (Token(Ident("PathBuf")), 57..64)] }, 50..65), (Token(Symbol(Semi)), 65..66), (Token(Keyword(Use)), 67..70), (Token(Ident("std")), 71..74), (Token(Symbol(ColonColon)), 74..76), (Token(Ident("io")), 76..78), (Token(Symbol(ColonColon)), 78..80), (Tree { delim: Brace, tts: [(Token(Keyword(SelfVar)), 81..85), (Token(Symbol(Comma)), 85..86), (Token(Ident("Read")), 87..91), (Token(Symbol(Comma)), 91..92), (Token(Ident("Write")), 93..98)] }, 80..99), (Token(Symbol(Semi)), 99..100), (Token(Keyword(Use)), 101..104), (Token(Ident("std")), 105..108), (Token(Symbol(ColonColon)), 108..110), (Token(Ident("ffi")), 110..113), (Token(Symbol(ColonColon)), 113..115), (Token(Ident("OsStr")), 115..120), (Token(Symbol(Semi)), 120..121), (Token(Keyword(Use)), 122..125), (Token(Ident("mair")), 126..130), (Token(Symbol(ColonColon)), 130..132), (Token(Ident("parse")), 132..137), (Token(Symbol(ColonColon)), 137..139), (Token(Ident("error")), 139..144), (Token(Symbol(ColonColon)), 144..146), (Token(Symbol(Mul)), 146..147), (Token(Symbol(Semi)), 147..148), (Token(Keyword(Use)), 149..152), (Token(Ident("mair")), 153..157), (Token(Symbol(ColonColon)), 157..159), (Token(Ident("parse")), 159..164), (Token(Symbol(ColonColon)), 164..166), (Token(Ident("lexer")), 166..171), (Token(Symbol(ColonColon)), 171..173), (Token(Symbol(Mul)), 173..174), (Token(Symbol(Semi)), 174..175), (Token(Keyword(Fn)), 177..179), (Token(Ident("test_dir_helper")), 180..195), (Token(Symbol(Lt)), 195..196), (Token(Ident("P")), 196..197), (Token(Symbol(Colon)), 197..198), (Token(Ident("AsRef")), 199..204), (Token(Symbol(Lt)), 204..205), (Token(Ident("Path")), 205..209), (Token(Symbol(Gt)), 209..210), (Token(Symbol(Comma)), 210..211), (Token(Ident("F")), 212..213), (Token(Symbol(Colon)), 213..214), (Token(Ident("Fn")), 215..217), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 218..219), (Token(Keyword(Mut)), 219..222), (Token(Ident("Write")), 223..228), (Token(Symbol(Comma)), 228..229), (Token(Symbol(And)), 230..231), (Token(Ident("str")), 231..234)] }, 217..235), (Token(Symbol(RArrow)), 236..238), (Token(Ident("io")), 239..241), (Token(Symbol(ColonColon)), 241..243), (Token(Ident("Result")), 243..249), (Token(Symbol(Lt)), 249..250), (Tree { delim: Paren, tts: [] }, 250..252), (Token(Symbol(Shr)), 252..254), (Tree { delim: Paren, tts: [(Token(Ident("path")), 260..264), (Token(Symbol(Colon)), 264..265), (Token(Ident("P")), 266..267), (Token(Symbol(Comma)), 267..268), (Token(Ident("f")), 273..274), (Token(Symbol(Colon)), 274..275), (Token(Ident("F")), 276..277), (Token(Symbol(Comma)), 277..278)] }, 254..280), (Token(Symbol(RArrow)), 281..283), (Token(Ident("io")), 284..286), (Token(Symbol(ColonColon)), 286..288), (Token(Ident("Result")), 288..294), (Token(Symbol(Lt)), 294..295), (Token(Ident("bool")), 295..299), (Token(Symbol(Gt)), 299..300), (Tree { delim: Brace, tts: [(Token(Keyword(Let)), 307..310), (Token(Keyword(Mut)), 311..314), (Token(Ident("passed")), 315..321), (Token(Symbol(Eq)), 322..323), (Token(Literal(Bool(true))), 324..328), (Token(Symbol(Semi)), 328..329), (Token(Keyword(For)), 334..337), (Token(Ident("dirent")), 338..344), (Token(Keyword(In)), 345..347), (Token(Ident("read_dir")), 348..356), (Tree { delim: Paren, tts: [(Token(Ident("path")), 357..361)] }, 356..362), (Token(Symbol(Question)), 362..363), (Tree { delim: Brace, tts: [(Token(Keyword(Let)), 374..377), (Token(Ident("pathi")), 378..383), (Token(Symbol(Eq)), 384..385), (Token(Ident("dirent")), 386..392), (Token(Symbol(Question)), 392..393), (Token(Symbol(Dot)), 393..394), (Token(Ident("path")), 394..398), (Tree { delim: Paren, tts: [] }, 398..400), (Token(Symbol(Semi)), 400..401), (Token(Keyword(If)), 410..412), (Token(Ident("pathi")), 413..418), (Token(Symbol(Dot)), 418..419), (Token(Ident("extension")), 419..428), (Tree { delim: Paren, tts: [] }, 428..430), (Token(Symbol(EqEq)), 431..433), (Token(Ident("Some")), 434..438), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 439..440), (Token(Ident("OsStr")), 440..445), (Token(Symbol(ColonColon)), 445..447), (Token(Ident("new")), 447..450), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "in" })), 451..455)] }, 450..456)] }, 438..457), (Tree { delim: Brace, tts: [(Token(Ident("println")), 472..479), (Token(Symbol(Bang)), 479..480), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "testing {}" })), 481..493), (Token(Symbol(Comma)), 493..494), (Token(Ident("pathi")), 495..500), (Token(Symbol(Dot)), 500..501), (Token(Ident("display")), 501..508), (Tree { delim: Paren, tts: [] }, 508..510)] }, 480..511), (Token(Symbol(Semi)), 511..512), (Token(Keyword(Let)), 525..528), (Token(Ident("patho")), 529..534), (Token(Symbol(Eq)), 535..536), (Token(Ident("pathi")), 537..542), (Token(Symbol(Dot)), 542..543), (Token(Ident("with_extension")), 543..557), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "out" })), 558..563)] }, 557..564), (Token(Symbol(Semi)), 564..565), (Token(Keyword(Let)), 578..581), (Token(Keyword(Mut)), 582..585), (Token(Ident("si")), 586..588), (Token(Symbol(Eq)), 589..590), (Token(Ident("String")), 591..597), (Token(Symbol(ColonColon)), 597..599), (Token(Ident("new")), 599..602), (Tree { delim: Paren, tts: [] }, 602..604), (Token(Symbol(Semi)), 604..605), (Token(Keyword(Let)), 618..621), (Token(Keyword(Mut)), 622..625), (Token(Ident("vo")), 626..628), (Token(Symbol(Eq)), 629..630), (Token(Ident("vec")), 631..634), (Token(Symbol(Bang)), 634..635), (Tree { delim: Bracket, tts: [] }, 635..637), (Token(Symbol(Semi)), 637..638), (Token(Ident("File")), 651..655), (Token(Symbol(ColonColon)), 655..657), (Token(Ident("open")), 657..661), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 662..663), (Token(Ident("pathi")), 663..668)] }, 661..669), (Token(Symbol(Question)), 669..670), (Token(Symbol(Dot)), 687..688), (Token(Ident("read_to_string")), 688..702), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 703..704), (Token(Keyword(Mut)), 704..707), (Token(Ident("si")), 708..710)] }, 702..711), (Token(Symbol(Question)), 711..712), (Token(Symbol(Semi)), 712..713), (Token(Ident("File")), 726..730), (Token(Symbol(ColonColon)), 730..732), (Token(Ident("open")), 732..736), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 737..738), (Token(Ident("patho")), 738..743)] }, 736..744), (Token(Symbol(Question)), 744..745), (Token(Symbol(Dot)), 762..763), (Token(Ident("read_to_end")), 763..774), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 775..776), (Token(Keyword(Mut)), 776..779), (Token(Ident("vo")), 780..782)] }, 774..783), (Token(Symbol(Question)), 783..784), (Token(Symbol(Semi)), 784..785), (Token(Keyword(Let)), 798..801), (Token(Keyword(Mut)), 802..805), (Token(Ident("buf")), 806..809), (Token(Symbol(Eq)), 810..811), (Token(Ident("vec")), 812..815), (Token(Symbol(Bang)), 815..816), (Tree { delim: Bracket, tts: [] }, 816..818), (Token(Symbol(Semi)), 818..819), (Token(Ident("f")), 832..833), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 834..835), (Token(Keyword(Mut)), 835..838), (Token(Ident("buf")), 839..842), (Token(Symbol(Comma)), 842..843), (Token(Symbol(And)), 844..845), (Token(Ident("si")), 845..847)] }, 833..848), (Token(Symbol(Question)), 848..849), (Token(Symbol(Semi)), 849..850), (Token(Keyword(If)), 863..865), (Token(Ident("vo")), 866..868), (Token(Symbol(EqEq)), 869..871), (Token(Ident("buf")), 872..875), (Tree { delim: Brace, tts: [(Token(Ident("println")), 894..901), (Token(Symbol(Bang)), 901..902), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "ok" })), 903..907)] }, 902..908), (Token(Symbol(Semi)), 908..909)] }, 876..923), (Token(Keyword(Else)), 924..928), (Tree { delim: Brace, tts: [(Token(Ident("File")), 947..951), (Token(Symbol(ColonColon)), 951..953), (Token(Ident("create")), 953..959), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 960..961), (Token(Ident("patho")), 961..966)] }, 959..967), (Token(Symbol(Question)), 967..968), (Token(Symbol(Dot)), 989..990), (Token(Ident("write_all")), 990..999), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 1000..1001), (Token(Ident("buf")), 1001..1004)] }, 999..1005), (Token(Symbol(Question)), 1005..1006), (Token(Symbol(Semi)), 1006..1007), (Token(Ident("passed")), 1024..1030), (Token(Symbol(Eq)), 1031..1032), (Token(Literal(Bool(false))), 1033..1038), (Token(Symbol(Semi)), 1038..1039), (Token(Ident("println")), 1056..1063), (Token(Symbol(Bang)), 1063..1064), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "fail" })), 1065..1071)] }, 1064..1072), (Token(Symbol(Semi)), 1072..1073)] }, 929..1087)] }, 458..1097)] }, 364..1103), (Token(Ident("Ok")), 1108..1110), (Tree { delim: Paren, tts: [(Token(Ident("passed")), 1111..1117)] }, 1110..1118)] }, 301..1120), (Token(Keyword(Fn)), 1122..1124), (Token(Ident("test_dir")), 1125..1133), (Token(Symbol(Lt)), 1133..1134), (Token(Ident("F")), 1134..1135), (Token(Symbol(Colon)), 1135..1136), (Token(Ident("Fn")), 1137..1139), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 1140..1141), (Token(Keyword(Mut)), 1141..1144), (Token(Ident("Write")), 1145..1150), (Token(Symbol(Comma)), 1150..1151), (Token(Symbol(And)), 1152..1153), (Token(Ident("str")), 1153..1156)] }, 1139..1157), (Token(Symbol(RArrow)), 1158..1160), (Token(Ident("io")), 1161..1163), (Token(Symbol(ColonColon)), 1163..1165), (Token(Ident("Result")), 1165..1171), (Token(Symbol(Lt)), 1171..1172), (Tree { delim: Paren, tts: [] }, 1172..1174), (Token(Symbol(Shr)), 1174..1176), (Tree { delim: Paren, tts: [(Token(Ident("dir")), 1177..1180), (Token(Symbol(Colon)), 1180..1181), (Token(Symbol(And)), 1182..1183), (Token(Ident("str")), 1183..1186), (Token(Symbol(Comma)), 1186..1187), (Token(Ident("f")), 1188..1189), (Token(Symbol(Colon)), 1189..1190), (Token(Ident("F")), 1191..1192)] }, 1176..1193), (Tree { delim: Brace, tts: [(Token(Keyword(Let)), 1200..1203), (Token(Keyword(Mut)), 1204..1207), (Token(Ident("path")), 1208..1212), (Token(Symbol(Eq)), 1213..1214), (Token(Ident("PathBuf")), 1215..1222), (Token(Symbol(ColonColon)), 1222..1224), (Token(Ident("new")), 1224..1227), (Tree { delim: Paren, tts: [] }, 1227..1229), (Token(Symbol(Semi)), 1229..1230), (Token(Ident("path")), 1235..1239), (Token(Symbol(Dot)), 1239..1240), (Token(Ident("push")), 1240..1244), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "." })), 1245..1248)] }, 1244..1249), (Token(Symbol(Semi)), 1249..1250), (Token(Ident("path")), 1255..1259), (Token(Symbol(Dot)), 1259..1260), (Token(Ident("push")), 1260..1264), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "tests" })), 1265..1272)] }, 1264..1273), (Token(Symbol(Semi)), 1273..1274), (Token(Ident("path")), 1279..1283), (Token(Symbol(Dot)), 1283..1284), (Token(Ident("push")), 1284..1288), (Tree { delim: Paren, tts: [(Token(Ident("dir")), 1289..1292)] }, 1288..1293), (Token(Symbol(Semi)), 1293..1294), (Token(Keyword(Match)), 1299..1304), (Token(Ident("test_dir_helper")), 1305..1320), (Tree { delim: Paren, tts: [(Token(Ident("path")), 1321..1325), (Token(Symbol(Comma)), 1325..1326), (Token(Ident("f")), 1327..1328)] }, 1320..1329), (Tree { delim: Brace, tts: [(Token(Ident("Err")), 1340..1343), (Tree { delim: Paren, tts: [(Token(Ident("e")), 1344..1345)] }, 1343..1346), (Token(Symbol(RFatArrow)), 1347..1349), (Token(Ident("panic")), 1350..1355), (Token(Symbol(Bang)), 1355..1356), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "os error: {:?}" })), 1357..1373), (Token(Symbol(Comma)), 1373..1374), (Token(Ident("e")), 1375..1376)] }, 1356..1377), (Token(Symbol(Comma)), 1377..1378), (Token(Ident("Ok")), 1387..1389), (Tree { delim: Paren, tts: [(Token(Literal(Bool(false))), 1390..1395)] }, 1389..1396), (Token(Symbol(RFatArrow)), 1397..1399), (Token(Ident("panic")), 1400..1405), (Token(Symbol(Bang)), 1405..1406), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "test fail" })), 1407..1418)] }, 1406..1419), (Token(Symbol(Comma)), 1419..1420), (Token(Ident("Ok")), 1429..1431), (Tree { delim: Paren, tts: [(Token(Literal(Bool(true))), 1432..1436)] }, 1431..1437), (Token(Symbol(RFatArrow)), 1438..1440), (Tree { delim: Paren, tts: [] }, 1441..1443), (Token(Symbol(Comma)), 1443..1444)] }, 1330..1450)] }, 1194..1452), (Token(Keyword(Fn)), 1454..1456), (Token(Ident("test_dir_lines")), 1457..1471), (Token(Symbol(Lt)), 1471..1472), (Token(Ident("F")), 1472..1473), (Token(Symbol(Colon)), 1473..1474), (Token(Ident("Fn")), 1475..1477), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 1478..1479), (Token(Keyword(Mut)), 1479..1482), (Token(Ident("Write")), 1483..1488), (Token(Symbol(Comma)), 1488..1489), (Token(Symbol(And)), 1490..1491), (Token(Ident("str")), 1491..1494)] }, 1477..1495), (Token(Symbol(RArrow)), 1496..1498), (Token(Ident("io")), 1499..1501), (Token(Symbol(ColonColon)), 1501..1503), (Token(Ident("Result")), 1503..1509), (Token(Symbol(Lt)), 1509..1510), (Tree { delim: Paren, tts: [] }, 1510..1512), (Token(Symbol(Shr)), 1512..1514), (Tree { delim: Paren, tts: [(Token(Ident("dir")), 1515..1518), (Token(Symbol(Colon)), 1518..1519), (Token(Symbol(And)), 1520..1521), (Token(Ident("str")), 1521..1524), (Token(Symbol(Comma)), 1524..1525), (Token(Ident("f")), 1526..1527), (Token(Symbol(Colon)), 1527..1528), (Token(Ident("F")), 1529..1530)] }, 1514..1531), (Tree { delim: Brace, tts: [(Token(Ident("test_dir")), 1538..1546), (Tree { delim: Paren, tts: [(Token(Ident("dir")), 1547..1550), (Token(Symbol(Comma)), 1550..1551), (Token(Symbol(Or)), 1552..1553), (Token(Keyword(Mut)), 1553..1556), (Token(Ident("fo")), 1557..1559), (Token(Symbol(Comma)), 1559..1560), (Token(Ident("s")), 1561..1562), (Token(Symbol(Or)), 1562..1563), (Tree { delim: Brace, tts: [(Token(Keyword(For)), 1574..1577), (Tree { delim: Paren, tts: [(Token(Ident("i")), 1579..1580), (Token(Symbol(Comma)), 1580..1581), (Token(Ident("line")), 1582..1586)] }, 1578..1587), (Token(Keyword(In)), 1588..1590), (Token(Ident("s")), 1591..1592), (Token(Symbol(Dot)), 1592..1593), (Token(Ident("lines")), 1593..1598), (Tree { delim: Paren, tts: [] }, 1598..1600), (Token(Symbol(Dot)), 1600..1601), (Token(Ident("enumerate")), 1601..1610), (Tree { delim: Paren, tts: [] }, 1610..1612), (Tree { delim: Brace, tts: [(Token(Ident("print")), 1627..1632), (Token(Symbol(Bang)), 1632..1633), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "#{} " })), 1634..1640), (Token(Symbol(Comma)), 1640..1641), (Token(Ident("i")), 1642..1643), (Token(Symbol(Add)), 1644..1645), (Token(Literal(IntLike { ty: None, val: 1 })), 1646..1647)] }, 1633..1648), (Token(Symbol(Semi)), 1648..1649), (Token(Ident("f")), 1662..1663), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 1664..1665), (Token(Keyword(Mut)), 1665..1668), (Token(Ident("fo")), 1669..1671), (Token(Symbol(Comma)), 1671..1672), (Token(Ident("line")), 1673..1677)] }, 1663..1678), (Token(Symbol(Question)), 1678..1679)] }, 1613..1689), (Token(Ident("println")), 1698..1705), (Token(Symbol(Bang)), 1705..1706), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "" })), 1707..1709)] }, 1706..1710), (Token(Symbol(Semi)), 1710..1711), (Token(Ident("Ok")), 1720..1722), (Tree { delim: Paren, tts: [(Tree { delim: Paren, tts: [] }, 1723..1725)] }, 1722..1726)] }, 1564..1732)] }, 1546..1733), (Token(Symbol(Semi)), 1733..1734)] }, 1532..1736), (Token(Keyword(Fn)), 1738..1740), (Token(Ident("lex")), 1741..1744), (Tree { delim: Paren, tts: [(Token(Ident("input")), 1745..1750), (Token(Symbol(Colon)), 1750..1751), (Token(Symbol(And)), 1752..1753), (Token(Ident("str")), 1753..1756)] }, 1744..1757), (Token(Symbol(RArrow)), 1758..1760), (Token(Ident("Result")), 1761..1767), (Token(Symbol(Lt)), 1767..1768), (Token(Ident("Vec")), 1768..1771), (Token(Symbol(Lt)), 1771..1772), (Token(Ident("Token")), 1772..1777), (Token(Symbol(Gt)), 1777..1778), (Token(Symbol(Comma)), 1778..1779), (Token(Ident("LexicalError")), 1780..1792), (Token(Symbol(Lt)), 1792..1793), (Token(Ident("usize")), 1793..1798), (Token(Symbol(Shr)), 1798..1800), (Tree { delim: Brace, tts: [(Token(Keyword(Let)), 1807..1810), (Token(Keyword(Mut)), 1811..1814), (Token(Ident("v")), 1815..1816), (Token(Symbol(Eq)), 1817..1818), (Token(Ident("vec")), 1819..1822), (Token(Symbol(Bang)), 1822..1823), (Tree { delim: Bracket, tts: [] }, 1823..1825), (Token(Symbol(Semi)), 1825..1826), (Token(Keyword(For)), 1831..1834), (Token(Ident("c")), 1835..1836), (Token(Keyword(In)), 1837..1839), (Token(Ident("Lexer")), 1840..1845), (Token(Symbol(ColonColon)), 1845..1847), (Token(Ident("new")), 1847..1850), (Tree { delim: Paren, tts: [(Token(Ident("input")), 1851..1856)] }, 1850..1857), (Tree { delim: Brace, tts: [(Token(Ident("v")), 1868..1869), (Token(Symbol(Dot)), 1869..1870), (Token(Ident("push")), 1870..1874), (Tree { delim: Paren, tts: [(Token(Ident("c")), 1875..1876), (Token(Symbol(Question)), 1876..1877)] }, 1874..1878), (Token(Symbol(Semi)), 1878..1879)] }, 1858..1885), (Token(Ident("Ok")), 1890..1892), (Tree { delim: Paren, tts: [(Token(Ident("v")), 1893..1894)] }, 1892..1895)] }, 1801..1897), (Token(Keyword(Fn)), 1899..1901), (Token(Ident("tts")), 1902..1905), (Tree { delim: Paren, tts: [(Token(Ident("input")), 1906..1911), (Token(Symbol(Colon)), 1911..1912), (Token(Symbol(And)), 1913..1914), (Token(Ident("str")), 1914..1917)] }, 1905..1918), (Token(Symbol(RArrow)), 1919..1921), (Token(Ident("Result")), 1922..1928), (Token(Symbol(Lt)), 1928..1929), (Token(Ident("Vec")), 1929..1932), (Token(Symbol(Lt)), 1932..1933), (Token(Ident("TT")), 1933..1935), (Token(Symbol(Gt)), 1935..1936), (Token(Symbol(Comma)), 1936..1937), (Token(Ident("UnmatchedDelimError")), 1938..1957), (Token(Symbol(Gt)), 1957..1958), (Tree { delim: Brace, tts: [(Token(Keyword(Let)), 1965..1968), (Token(Ident("ltoks")), 1969..1974), (Token(Symbol(Eq)), 1975..1976), (Token(Ident("lex")), 1977..1980), (Tree { delim: Paren, tts: [(Token(Ident("input")), 1981..1986)] }, 1980..1987), (Token(Symbol(Dot)), 1987..1988), (Token(Ident("unwrap")), 1988..1994), (Tree { delim: Paren, tts: [] }, 1994..1996), (Token(Symbol(Semi)), 1996..1997), (Token(Ident("parse_tts")), 2002..2011), (Tree { delim: Paren, tts: [(Token(Symbol(And)), 2012..2013), (Token(Ident("ltoks")), 2013..2018)] }, 2011..2019)] }, 1959..2021), (Token(Symbol(Hash)), 2023..2024), (Tree { delim: Bracket, tts: [(Token(Ident("test")), 2025..2029)] }, 2024..2030), (Token(Keyword(Fn)), 2031..2033), (Token(Ident("parse_test")), 2034..2044), (Tree { delim: Paren, tts: [] }, 2044..2046), (Tree { delim: Brace, tts: [(Token(Ident("test_dir_lines")), 2053..2067), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "lexer_unit" })), 2068..2080), (Token(Symbol(Comma)), 2080..2081), (Token(Symbol(Or)), 2082..2083), (Token(Ident("f")), 2083..2084), (Token(Symbol(Comma)), 2084..2085), (Token(Ident("s")), 2086..2087), (Token(Symbol(Or)), 2087..2088), (Tree { delim: Brace, tts: [(Token(Ident("writeln")), 2099..2106), (Token(Symbol(Bang)), 2106..2107), (Tree { delim: Paren, tts: [(Token(Ident("f")), 2108..2109), (Token(Symbol(Comma)), 2109..2110), (Token(Literal(StrLike { is_bytestr: false, s: "{:?}" })), 2111..2117), (Token(Symbol(Comma)), 2117..2118), (Token(Ident("lex")), 2119..2122), (Tree { delim: Paren, tts: [(Token(Ident("s")), 2123..2124)] }, 2122..2125)] }, 2107..2126)] }, 2089..2132)] }, 2067..2133), (Token(Symbol(Semi)), 2133..2134), (Token(Ident("test_dir")), 2139..2147), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "lexer_large" })), 2148..2161), (Token(Symbol(Comma)), 2161..2162), (Token(Symbol(Or)), 2163..2164), (Token(Ident("f")), 2164..2165), (Token(Symbol(Comma)), 2165..2166), (Token(Ident("s")), 2167..2168), (Token(Symbol(Or)), 2168..2169), (Tree { delim: Brace, tts: [(Token(Ident("writeln")), 2180..2187), (Token(Symbol(Bang)), 2187..2188), (Tree { delim: Paren, tts: [(Token(Ident("f")), 2189..2190), (Token(Symbol(Comma)), 2190..2191), (Token(Literal(StrLike { is_bytestr: false, s: "{:?}" })), 2192..2198), (Token(Symbol(Comma)), 2198..2199), (Token(Ident("lex")), 2200..2203), (Tree { delim: Paren, tts: [(Token(Ident("s")), 2204..2205)] }, 2203..2206)] }, 2188..2207)] }, 2170..2213)] }, 2147..2214), (Token(Symbol(Semi)), 2214..2215), (Token(Ident("test_dir")), 2220..2228), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "tts_simple" })), 2229..2241), (Token(Symbol(Comma)), 2241..2242), (Token(Symbol(Or)), 2243..2244), (Token(Ident("f")), 2244..2245), (Token(Symbol(Comma)), 2245..2246), (Token(Ident("s")), 2247..2248), (Token(Symbol(Or)), 2248..2249), (Tree { delim: Brace, tts: [(Token(Ident("writeln")), 2260..2267), (Token(Symbol(Bang)), 2267..2268), (Tree { delim: Paren, tts: [(Token(Ident("f")), 2269..2270), (Token(Symbol(Comma)), 2270..2271), (Token(Literal(StrLike { is_bytestr: false, s: "{:?}" })), 2272..2278), (Token(Symbol(Comma)), 2278..2279), (Token(Ident("tts")), 2280..2283), (Tree { delim: Paren, tts: [(Token(Ident("s")), 2284..2285)] }, 2283..2286)] }, 2268..2287)] }, 2250..2293)] }, 2228..2294), (Token(Symbol(Semi)), 2294..2295), (Token(Ident("test_dir")), 2300..2308), (Tree { delim: Paren, tts: [(Token(Literal(StrLike { is_bytestr: false, s: "tts_large" })), 2309..2320), (Token(Symbol(Comma)), 2320..2321), (Token(Symbol(Or)), 2322..2323), (Token(Ident("f")), 2323..2324), (Token(Symbol(Comma)), 2324..2325), (Token(Ident("s")), 2326..2327), (Token(Symbol(Or)), 2327..2328), (Tree { delim: Brace, tts: [(Token(Ident("writeln")), 2339..2346), (Token(Symbol(Bang)), 2346..2347), (Tree { delim: Paren, tts: [(Token(Ident("f")), 2348..2349), (Token(Symbol(Comma)), 2349..2350), (Token(Literal(StrLike { is_bytestr: false, s: "{:?}" })), 2351..2357), (Token(Symbol(Comma)), 2357..2358), (Token(Ident("tts")), 2359..2362), (Tree { delim: Paren, tts: [(Token(Ident("s")), 2363..2364)] }, 2362..2365)] }, 2347..2366)] }, 2329..2372)] }, 2308..2373), (Token(Symbol(Semi)), 2373..2374)] }, 2047..2376)])
