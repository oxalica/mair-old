Mod { attrs: [Doc { loc: "//! try to cover more cases\n", doc: " try to cover more cases\n" }], items: [ItemWrap { attrs: [], is_pub: false, detail: UseOne { path: Absolute { comps: [] }, name: Name { name: Err(""), alias: None } } }, ItemWrap { attrs: [], is_pub: false, detail: UseSome { path: Absolute { comps: [Ok("a"), Err(""), Ok("c")] }, names: [Name { name: Ok("a"), alias: Some(Err("")) }] } }, ItemWrap { attrs: [], is_pub: true, detail: Extern { abi: Extern, items: [] } }, ItemWrap { attrs: [], is_pub: false, detail: ExternCrate { name: Err("") } }, ItemWrap { attrs: [], is_pub: false, detail: Extern { abi: Extern, items: [ItemWrap { attrs: [], is_pub: false, detail: Static { name: Ok("M"), ty: Some(Apply(Angle { name: Path { is_absolute: false, comps: [Name { name: Ok("i32"), hint: None }] }, args: [] })) } }] } }, ItemWrap { attrs: [], is_pub: false, detail: Trait { name: Ok("Tr"), templ: [], base: None, whs: None, items: [ItemWrap { attrs: [], is_pub: false, detail: AssocTy { name: Ok("T"), default: None } }] } }, ItemWrap { attrs: [], is_pub: false, detail: ImplTrait { templ: [], tr: Apply(Angle { name: Path { is_absolute: false, comps: [Name { name: Ok("T"), hint: None }] }, args: [] }), ty: Traits([]), whs: None, items: [ItemWrap { attrs: [], is_pub: false, detail: AssocTy { name: Ok("T"), val: Error } }] } }, ItemWrap { attrs: [], is_pub: false, detail: Mod { name: Err(""), items: [ItemWrap { attrs: [], is_pub: false, detail: Type { alias: Ok("T"), templ: [Ty { name: Ok("F"), bound: None }], whs: None, origin: Traits([]) } }, ItemWrap { attrs: [], is_pub: false, detail: Type { alias: Ok("U"), templ: [Ty { name: Ok("X"), bound: None }, Ty { name: Ok("Y"), bound: None }], whs: None, origin: Error } }] } }, ItemWrap { attrs: [], is_pub: false, detail: FuncDecl { sig: FuncSig { is_unsafe: true, abi: Normal, name: Ok("name"), templ: [], args: [], is_va: false, ret_ty: None, whs: None } } }, ItemWrap { attrs: [], is_pub: false, detail: Func { sig: FuncSig { is_unsafe: false, abi: Extern, name: Ok("f"), templ: [], args: [Bind { pat: Hole, ty: Apply(Angle { name: Path { is_absolute: false, comps: [Name { name: Ok("i32"), hint: None }] }, args: [] }) }, Bind { pat: BindLike { name: Ok("b"), is_ref: false, is_mut: true, pat: None }, ty: Traits([]) }], is_va: true, ret_ty: Some(Traits([])), whs: None }, body: Block { attrs: [], stmts: [Item(ItemWrap { attrs: [], is_pub: false, detail: Const { name: Ok("N"), ty: Error, val: Literal(IntLike { ty: None, val: 10 }) } })], ret: Some(BinaryOp { op: Add, op_loc: "+", l: BinaryOp { op: Sub, op_loc: "-", l: Path(Path { is_absolute: false, comps: [Name { name: Ok("b"), hint: None }] }), r: BinaryOp { op: Mul, op_loc: "*", l: Path(Path { is_absolute: false, comps: [Name { name: Ok("c"), hint: None }] }), r: UnaryOp { op: Not, op_loc: "!", expr: Path(Path { is_absolute: false, comps: [Name { name: Err(""), hint: None }] }) } } }, r: Path(Path { is_absolute: false, comps: [Name { name: Ok("d"), hint: None }] }) }) } } }, ItemWrap { attrs: [Meta(Sub { name: Ok("f"), subs: [Flag(Ok("inner")), Flag(Ok("k"))] })], is_pub: false, detail: Func { sig: FuncSig { is_unsafe: false, abi: Normal, name: Ok("g"), templ: [], args: [], is_va: false, ret_ty: Some(Hole), whs: None }, body: Block { attrs: [], stmts: [PluginInvoke(PluginInvoke { name: Ok("m"), ident: None, tt: (Tree { delim: Brace, tts: [] }, "{}") })], ret: Some(As { expr: UnaryOp { op: Neg, op_loc: "-", expr: Literal(IntLike { ty: None, val: 1 }) }, kw_loc: "as", ty: Traits([]) }) } } }, ItemWrap { attrs: [], is_pub: false, detail: Const { name: Err(""), ty: Error, val: Match { kw_loc: "match", expr: Path(Path { is_absolute: false, comps: [Name { name: Ok("a"), hint: None }] }), arms: [MatchArm { pats: [BindLike { name: Ok("p1"), is_ref: false, is_mut: false, pat: None }], cond: Some(Literal(Bool(true))), expr: Tuple([]) }, MatchArm { pats: [BindLike { name: Ok("not"), is_ref: false, is_mut: false, pat: None }, BindLike { name: Ok("finished"), is_ref: false, is_mut: false, pat: None }], cond: None, expr: Error }] } } }] }
35..38 "wtf" Unknow beginning of item
46..46 "" Expect a semicolon
87..87 "" Expect the body in `{}`
100..100 "" Expect a semicolon
114..119 "const" Expect `fn` or `static`
120..121 "N" Expect `fn` or `static`
121..122 ":" Expect `fn` or `static`
123..126 "i32" Expect `fn` or `static`
126..127 ";" Expect `fn` or `static`
145..145 "" Expect a semicolon
146..147 "=" Expect `fn` or `static`
148..149 "1" Expect `fn` or `static`
149..150 ";" Expect `fn` or `static`
203..203 "" Expect `= <type>`
229..229 "" Expect a semicolon
246..246 "" Expect `= <type>`
246..246 "" Expect a semicolon
250..256 "unsafe" Unknow beginning of item
272..272 "" Expect the parameter list
272..272 "" Expect a semicolon
326..326 "" Expect `: <type>`
367..368 "=" Expect a separator
410..410 "" Expect `: <type>`
431..431 "" Expect a pattern
