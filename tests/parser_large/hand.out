Mod { inner_attrs: [Doc { loc: "//! try to cover more cases\n", doc: " try to cover more cases\n" }], items: [Item { outer_attrs: [Doc { loc: "/// a\n", doc: " a\n" }], pub_: None, detail: Null }, Item { outer_attrs: [], pub_: None, detail: Unknow((Token(Ident("wtf")), "wtf")) }, Item { outer_attrs: [], pub_: None, detail: UseOne { path: Path { is_absolute: true, comps: [] }, name: Name { name: Err(""), alias: None }, semi: Err("") } }, Item { outer_attrs: [], pub_: None, detail: UseSome { path: Path { is_absolute: false, comps: [Name { name: Ok("a"), hint: None }, Name { name: Err(""), hint: None }, Name { name: Ok("c"), hint: None }] }, names: [Name { name: Ok("a"), alias: Some(Err("")) }], semi: Ok(()) } }, Item { outer_attrs: [], pub_: Some("pub"), detail: Null }, Item { outer_attrs: [], pub_: Some("pub"), detail: Null }, Item { outer_attrs: [], pub_: Some("pub"), detail: Extern { abi: Extern, inner: None } }, Item { outer_attrs: [], pub_: None, detail: ExternCrate { name: Err(""), semi: Err("") } }, Item { outer_attrs: [], pub_: None, detail: Extern { abi: Extern, inner: Some(Mod { inner_attrs: [], items: [Item { outer_attrs: [], pub_: None, detail: Type { alias: Ok("T"), templ: [Ty { name: Ok("F"), bound: None }], whs: None, origin: Some(Traits([])), semi: Err("") } }, Item { outer_attrs: [], pub_: None, detail: Type { alias: Ok("U"), templ: [Ty { name: Ok("X"), bound: None }, Ty { name: Ok("Y"), bound: None }], whs: None, origin: None, semi: Err("") } }] }) } }, Item { outer_attrs: [], pub_: None, detail: Unknow((Token(Keyword(Unsafe)), "unsafe")) }, Item { outer_attrs: [], pub_: None, detail: FuncDecl { sig: FuncSig { unsafe_: Some("unsafe"), abi: Normal, name: Ok("name"), templ: [], args: None, va: None, ret_ty: None, whs: None }, semi: Err("") } }, Item { outer_attrs: [], pub_: None, detail: Func { sig: FuncSig { unsafe_: None, abi: Extern, name: Ok("f"), templ: [], args: Some([Bind { pat: Hole, ty: Some(Apply(Angle { name: Path { is_absolute: false, comps: [Name { name: Ok("i32"), hint: None }] }, args: None })) }, Bind { pat: BindLike { name: Ok("b"), ref_: None, mut_: Some("mut"), pat: None }, ty: Some(Traits([])) }]), va: Some("..."), ret_ty: Some(Traits([])), whs: None }, body: Block { inner_attrs: [], stmts: [Item(Item { outer_attrs: [], pub_: None, detail: Const { name: Ok("N"), ty: None, val: Some(Literal(IntLike { ty: None, val: 10 })), semi: Ok(()) } })], ret: Some(BinaryOp { op: Add, op_loc: "+", l: BinaryOp { op: Sub, op_loc: "-", l: Path(Path { is_absolute: false, comps: [Name { name: Ok("b"), hint: None }] }), r: BinaryOp { op: Mul, op_loc: "*", l: Path(Path { is_absolute: false, comps: [Name { name: Ok("c"), hint: None }] }), r: UnaryOp { op: Not, op_loc: "!", expr: Path(Path { is_absolute: false, comps: [Name { name: Err(""), hint: None }] }) } } }, r: Path(Path { is_absolute: false, comps: [Name { name: Ok("d"), hint: None }] }) }) } } }, Item { outer_attrs: [Meta { meta: Sub { name: Ok("f"), subs: [Flag(Ok("inner")), Flag(Ok("k")), Unknow((Token(Symbol(Eq)), "="))] }, unknow: [] }], pub_: None, detail: Func { sig: FuncSig { unsafe_: None, abi: Normal, name: Ok("g"), templ: [], args: Some([]), va: None, ret_ty: Some(Hole), whs: None }, body: Block { inner_attrs: [], stmts: [PluginInvoke { p: PluginInvoke { name: Ok("m"), ident: None, tt: Some((Tree { delim: Brace, tts: [] }, "{}")) }, semi: Ok(()) }], ret: Some(As { expr: UnaryOp { op: Neg, op_loc: "-", expr: Literal(IntLike { ty: None, val: 1 }) }, kw_loc: "as", ty: Traits([]) }) } } }, Item { outer_attrs: [], pub_: None, detail: Const { name: Err(""), ty: None, val: Some(Match { kw_loc: "match", expr: Path(Path { is_absolute: false, comps: [Name { name: Ok("a"), hint: None }] }), arms: Some([Arm { pats: [BindLike { name: Ok("p1"), ref_: None, mut_: None, pat: None }, BindLike { name: Err(""), ref_: None, mut_: None, pat: None }], cond: Some(Literal(Bool(true))), expr: Some(Tuple([])) }, Arm { pats: [BindLike { name: Ok("not"), ref_: None, mut_: None, pat: None }, BindLike { name: Ok("finished"), ref_: None, mut_: None, pat: None }], cond: None, expr: None }]) }), semi: Ok(()) } }] }
