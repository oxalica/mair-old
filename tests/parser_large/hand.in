//! try to cover more cases
/// a

wtf

use ::
use a::::c::{a as };

pub pub pub extern
extern crate
extern {
    type T<F> =
    type U<X, Y,
}

unsafe

unsafe fn name

extern fn f(_: i32, mut b: , ... ) ->  {
    const N = 10;
    b - c * !  + d
}

#[f(inner, k=)]
fn g() -> _ {
    m! {} - 1 as
}

const = match a {
    p1 |  if true => (),
    not | finished
};

